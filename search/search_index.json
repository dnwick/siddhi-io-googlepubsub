{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Siddhi IO Google Pub/Sub The siddhi-io-googlepubsub extension is an extension to Siddhi that receives and publishes events from/to Google Pub/Sub. For information on Siddhi and it's features refer Siddhi Documentation . Download Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here . Latest API Docs Latest API Docs is 2.0.2 . Features googlepubsub ( Sink ) This sends messages to a topic in googlepubsub server. googlepubsub ( Source ) This receives messages from a topic in googlepubsub server. Dependencies There are no other dependencies needed for this extension. Installation For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions . Support and Contribution We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Information"},{"location":"#siddhi-io-google-pubsub","text":"The siddhi-io-googlepubsub extension is an extension to Siddhi that receives and publishes events from/to Google Pub/Sub. For information on Siddhi and it's features refer Siddhi Documentation .","title":"Siddhi IO Google Pub/Sub"},{"location":"#download","text":"Versions 2.x and above with group id io.siddhi.extension.* from here . Versions 1.x and lower with group id org.wso2.extension.siddhi.* from here .","title":"Download"},{"location":"#latest-api-docs","text":"Latest API Docs is 2.0.2 .","title":"Latest API Docs"},{"location":"#features","text":"googlepubsub ( Sink ) This sends messages to a topic in googlepubsub server. googlepubsub ( Source ) This receives messages from a topic in googlepubsub server.","title":"Features"},{"location":"#dependencies","text":"There are no other dependencies needed for this extension.","title":"Dependencies"},{"location":"#installation","text":"For installing this extension on various siddhi execution environments refer Siddhi documentation section on adding extensions .","title":"Installation"},{"location":"#support-and-contribution","text":"We encourage users to ask questions and get support via StackOverflow , make sure to add the siddhi tag to the issue for better response. If you find any issues related to the extension please report them on the issue tracker . For production support and other contribution related information refer Siddhi Community documentation.","title":"Support and Contribution"},{"location":"license/","text":"","title":"License"},{"location":"api/2.0.2/","text":"API Docs - v2.0.3-SNAPSHOT Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions. Sink googlepubsub (Sink) The GooglePubSub sink publishes messages to a topic in the GooglePubSub server. If the required topic does not exist, GooglePubSub Sink creates the topic and publishes messages to it. Syntax @sink(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The ID of the topic to which the messages that are processed by Siddhi are published. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @sink(type = 'googlepubsub', @map(type= 'text'), project.id = 'sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', topic.id ='topicA', ) define stream InputStream(message string); This query publishes messages to a topic in the GooglePubSub server. Here, the messages are published to'topicA' topic in the 'sp-path-1547649404768' project. If the 'topicA' topic already exists in the 'sp-path-1547649404768' project, messages are directly published to that topic. If it does not exist, a topic with that ID is newly created in the project and then, the messages are published to that topic. Source googlepubsub (Source) The GooglePubSub source receives events to be processed by Siddhi from a topic in a GooglePubSub server. Here, a subscriber client creates a subscription to that topic and consumes messages via the subscription. The subscription applications receive only the messages that are published after the subscription is created. A subscription connects a topic to a subscriber application, enabling the application to receive and process messages from that topic. A topic can have multiple subscriptions, but a given subscription belongs only to a single topic. Syntax @source(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", subscription.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The unique ID of the topic from which the messages are received. STRING No No subscription.id The unique ID of the subscription from which messages must be retrieved. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @source(type='googlepubsub',@map(type='text'), topic.id='topicA', project.id='sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', subscription.id='subA', ) define stream OutputStream(message String); This query shows how to subscribe to a googlepubsub topic. Here, a googlepubsub source subscribes to the 'topicA' topic that resides in the 'sp-path-1547649404768' project within a googlepubsub instance. The events are received in the text format, mapped to a Siddhi event, and then sent to a stream named OutputStream.","title":"2.0.2"},{"location":"api/2.0.2/#api-docs-v203-snapshot","text":"Tested Siddhi Core version: 5.1.5 It could also support other Siddhi Core minor versions.","title":"API Docs - v2.0.3-SNAPSHOT"},{"location":"api/2.0.2/#sink","text":"","title":"Sink"},{"location":"api/2.0.2/#googlepubsub-sink","text":"The GooglePubSub sink publishes messages to a topic in the GooglePubSub server. If the required topic does not exist, GooglePubSub Sink creates the topic and publishes messages to it. Syntax @sink(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The ID of the topic to which the messages that are processed by Siddhi are published. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @sink(type = 'googlepubsub', @map(type= 'text'), project.id = 'sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', topic.id ='topicA', ) define stream InputStream(message string); This query publishes messages to a topic in the GooglePubSub server. Here, the messages are published to'topicA' topic in the 'sp-path-1547649404768' project. If the 'topicA' topic already exists in the 'sp-path-1547649404768' project, messages are directly published to that topic. If it does not exist, a topic with that ID is newly created in the project and then, the messages are published to that topic.","title":"googlepubsub (Sink)"},{"location":"api/2.0.2/#source","text":"","title":"Source"},{"location":"api/2.0.2/#googlepubsub-source","text":"The GooglePubSub source receives events to be processed by Siddhi from a topic in a GooglePubSub server. Here, a subscriber client creates a subscription to that topic and consumes messages via the subscription. The subscription applications receive only the messages that are published after the subscription is created. A subscription connects a topic to a subscriber application, enabling the application to receive and process messages from that topic. A topic can have multiple subscriptions, but a given subscription belongs only to a single topic. Syntax @source(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", subscription.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The unique ID of the topic from which the messages are received. STRING No No subscription.id The unique ID of the subscription from which messages must be retrieved. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @source(type='googlepubsub',@map(type='text'), topic.id='topicA', project.id='sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', subscription.id='subA', ) define stream OutputStream(message String); This query shows how to subscribe to a googlepubsub topic. Here, a googlepubsub source subscribes to the 'topicA' topic that resides in the 'sp-path-1547649404768' project within a googlepubsub instance. The events are received in the text format, mapped to a Siddhi event, and then sent to a stream named OutputStream.","title":"googlepubsub (Source)"},{"location":"api/latest/","text":"API Docs - v1.0.0-SNAPSHOT Sink googlepubsub (Sink) GooglePubSub Sink publishes messages to a topic in GooglePubSub server. If the required topic doesn't exist, GooglePubSub Sink creates a topic and publish messages to that topic. Syntax @sink(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The topic ID of the topic to which the messages that are processed by Siddhi are published. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @sink(type = 'googlepubsub', @map(type= 'text'), project.id = 'sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', topic.id ='topicA', ) define stream inputStream(message string); This example shows how to publish messages to a topic in the GooglePubSub with all supportive configurations.Accordingly, the messages are published to a topic having the topic.id named topicA in the project with a project.id 'sp-path-1547649404768'. If the required topic already exists in the particular project the messages are directly published to that topic.If the required topic does not exist, a new topic is created according to the provided topic.id and project.id. Then the messages are published to the particular topic. Source googlepubsub (Source) A GooglePubSub Source receives events to be processed by Siddhi, from a topic in GooglePubSub Server.Here, a subscriber client creates a subscription to that topic and consumes messages from the subscription. Only messages published to the topic after the subscription is created are available to subscriber applications. The subscription connects the topic to a subscriber application that receives and processes messages published to the topic. A topic can have multiple subscriptions, but a given subscription belongs to a single topic. Syntax @source(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", subscription.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The unique ID of the topic from which the messages are received. STRING No No subscription.id The unique ID of the subscription from which messages should be retrieved. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @source(type='googlepubsub',@map(type='text'), topic.id='topicA', project.id='sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', subscription.id='subA', ) define stream outputStream(message String); This example shows how to subscribe to a googlepubsub topic with all supporting configurations. With the following configurations the identified source, will subscribe to a topic having topic.id named as topicA which resides in a googlepubsub instance with the project.id of 'sp-path-1547649404768'. This GooglePubSub Source configuration listens to the events coming to a googlepubsub topic. The events are received in the text format and mapped to a Siddhi event, and sent to a the outputStream.","title":"latest"},{"location":"api/latest/#api-docs-v100-snapshot","text":"","title":"API Docs - v1.0.0-SNAPSHOT"},{"location":"api/latest/#sink","text":"","title":"Sink"},{"location":"api/latest/#googlepubsub-sink","text":"GooglePubSub Sink publishes messages to a topic in GooglePubSub server. If the required topic doesn't exist, GooglePubSub Sink creates a topic and publish messages to that topic. Syntax @sink(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The topic ID of the topic to which the messages that are processed by Siddhi are published. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @sink(type = 'googlepubsub', @map(type= 'text'), project.id = 'sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', topic.id ='topicA', ) define stream inputStream(message string); This example shows how to publish messages to a topic in the GooglePubSub with all supportive configurations.Accordingly, the messages are published to a topic having the topic.id named topicA in the project with a project.id 'sp-path-1547649404768'. If the required topic already exists in the particular project the messages are directly published to that topic.If the required topic does not exist, a new topic is created according to the provided topic.id and project.id. Then the messages are published to the particular topic.","title":"googlepubsub (Sink)"},{"location":"api/latest/#source","text":"","title":"Source"},{"location":"api/latest/#googlepubsub-source","text":"A GooglePubSub Source receives events to be processed by Siddhi, from a topic in GooglePubSub Server.Here, a subscriber client creates a subscription to that topic and consumes messages from the subscription. Only messages published to the topic after the subscription is created are available to subscriber applications. The subscription connects the topic to a subscriber application that receives and processes messages published to the topic. A topic can have multiple subscriptions, but a given subscription belongs to a single topic. Syntax @source(type=\"googlepubsub\", project.id=\"<STRING>\", topic.id=\"<STRING>\", subscription.id=\"<STRING>\", credential.path=\"<STRING>\", @map(...))) QUERY PARAMETERS Name Description Default Value Possible Data Types Optional Dynamic project.id The unique ID of the GCP console project within which the topic is created. STRING No No topic.id The unique ID of the topic from which the messages are received. STRING No No subscription.id The unique ID of the subscription from which messages should be retrieved. STRING No No credential.path The file path of the service account credentials. STRING No No Examples EXAMPLE 1 @source(type='googlepubsub',@map(type='text'), topic.id='topicA', project.id='sp-path-1547649404768', credential.path = 'src/test/resources/security/sp.json', subscription.id='subA', ) define stream outputStream(message String); This example shows how to subscribe to a googlepubsub topic with all supporting configurations. With the following configurations the identified source, will subscribe to a topic having topic.id named as topicA which resides in a googlepubsub instance with the project.id of 'sp-path-1547649404768'. This GooglePubSub Source configuration listens to the events coming to a googlepubsub topic. The events are received in the text format and mapped to a Siddhi event, and sent to a the outputStream.","title":"googlepubsub (Source)"}]}